name: Benchmark Pull Request

on:
  pull_request:

jobs:
  benchmark-pr:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the project
        run: uv sync --dev

      - name: Run benchmark
        run: |
          uv run python benchmarks/assembler.py --output benchmarks/assembler-pr.json

      - name: Download main benchmark artifact
        uses: actions/download-artifact@v4
        with:
          name: assembler-main
          path: benchmarks

      - name: Compare benchmarks
        run: |
          echo "Comparing benchmarks..."
          uv run pyperf compare_to benchmarks/assembler-main.json benchmarks/assembler-pr.json --table > benchmarks/comparison.txt

      - name: Create benchmark comment body
        run: |
          echo "## ðŸ“ˆ Benchmark comparison\n" > benchmarks/comment_body.md
          echo "\`\`\`" >> benchmarks/comment_body.md
          cat benchmarks/comparison.txt >> benchmarks/comment_body.md
          echo "\`\`\`" >> benchmarks/comment_body.md

      - name: Find previous benchmark comment
        id: find-comment
        run: |
          COMMENTS_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          COMMENTS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$COMMENTS_URL")
          COMMENT_ID=$(echo "$COMMENTS" | jq '.[] | select(.user.login == "github-actions[bot]") | select(.body | contains("ðŸ“ˆ Benchmark comparison")) | .id' || true)
          echo "comment_id=$COMMENT_ID" >> $GITHUB_OUTPUT

      - name: Create or update PR comment
        run: |
          COMMENTS_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/comments"
          if [ -n "${{ steps.find-comment.outputs.comment_id }}" ]; then
            echo "Updating existing comment..."
            curl -s -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{\"body\": \"$(jq -Rs < benchmarks/comment_body.md)\"}" \
              "$COMMENTS_URL/${{ steps.find-comment.outputs.comment_id }}"
          else
            echo "Creating new comment..."
            curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{\"body\": \"$(jq -Rs < benchmarks/comment_body.md)\"}" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          fi